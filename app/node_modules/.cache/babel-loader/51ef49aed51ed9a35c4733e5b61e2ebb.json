{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pikma\\\\Desktop\\\\Extinguisher-frontend\\\\app\\\\src\\\\components\\\\Home\\\\AddTest.js\";\nimport React, { Component } from 'react';\nimport '../style/AddTest.css';\nimport { Auth } from 'aws-amplify';\nimport { Dropdown } from 'semantic-ui-react';\n\nclass AddTest extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      testName: \"\",\n      question: \"\",\n      type: \"\",\n      questionObj: {\n        \"type\": \"\",\n        \"langugage\": \"\",\n        \"questionContent\": \"\",\n        \"numberOfAvaibleAnswers\": \"\",\n        \"avaibleAnswers\": \"\"\n      },\n      questionArray: [],\n      errors: {\n        question: false,\n        type: false\n      },\n      showMenu: false,\n      types: [\"Open\", \"Closed\"]\n    };\n    this.messages = {\n      type_incorect: 'Question type have not been chosen',\n      question_incorect: 'Your question has not any letter'\n    };\n\n    this.formValidation = () => {\n      let question = false;\n      let type = false;\n      let correct = false;\n\n      if (this.state.type == \"W\" || this.state.type == \"O\") {\n        type = true;\n      }\n\n      if (this.state.question.length > 0) {\n        question = true;\n      }\n\n      if (question && type) {\n        correct = true;\n      }\n\n      return {\n        correct,\n        question,\n        type\n      };\n    };\n\n    this.handleChange = e => {\n      const name = e.target.name;\n      this.setState({\n        [name]: e.target.value\n      });\n    };\n\n    this.handlePlusButton = async e => {\n      alert(\"User confirmed\");\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const validation = this.formValidation();\n      console.log(validation);\n\n      if (validation.correct) {\n        this.setState({\n          message: 'Send, please wait',\n          errors: {\n            email: false,\n            code: false\n          }\n        });\n\n        try {\n          await Auth.confirmSignUp(this.state.email, this.state.code); // console.log(vall)\n\n          alert(\"User confirmed\");\n        } catch (e) {\n          alert(e.message);\n        }\n      } else {\n        this.setState({\n          errors: {\n            email: !validation.email,\n            code: !validation.code\n          }\n        });\n      }\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.state.message !== '') {\n      setTimeout(() => this.setState({\n        message: ''\n      }), 9000);\n    }\n  }\n\n  showMenu(event) {\n    event.preventDefault();\n    this.setState({\n      showMenu: true\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"addQuestion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"testName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"testName:\", React.createElement(\"input\", {\n      type: \"text\",\n      id: \"testName\",\n      name: \"testName\",\n      value: this.state.testName,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      htmlFor: \"type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Chose question type\"), React.createElement(\"button\", {\n      onClick: this.showMenu,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Show menu\"), this.state.showMenu ? React.createElement(\"div\", {\n      className: \"menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \" Menu item 1 \"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \" Menu item 2 \"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \" Menu item 3 \")) : null);\n  }\n\n}\n\nexport default AddTest;","map":{"version":3,"sources":["C:/Users/pikma/Desktop/Extinguisher-frontend/app/src/components/Home/AddTest.js"],"names":["React","Component","Auth","Dropdown","AddTest","state","testName","question","type","questionObj","questionArray","errors","showMenu","types","messages","type_incorect","question_incorect","formValidation","correct","length","handleChange","e","name","target","setState","value","handlePlusButton","alert","handleSubmit","preventDefault","validation","console","log","message","email","code","confirmSignUp","componentDidUpdate","setTimeout","event","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport '../style/AddTest.css'\r\nimport { Auth } from 'aws-amplify'\r\nimport { Dropdown } from 'semantic-ui-react'\r\n\r\n\r\n\r\nclass AddTest extends Component {\r\n    state = {\r\n        testName:\"\",\r\n        question:\"\",\r\n        type:\"\",\r\n        questionObj: {\r\n            \"type\": \"\",\r\n            \"langugage\": \"\",\r\n            \"questionContent\": \"\",\r\n            \"numberOfAvaibleAnswers\": \"\",\r\n            \"avaibleAnswers\": \"\"\r\n          },\r\n        questionArray:[],\r\n        errors: {\r\n            question: false,\r\n            type: false,\r\n        },\r\n        showMenu: false,\r\n        types:[\"Open\",\"Closed\"]\r\n    }\r\n    \r\n        messages = {\r\n            type_incorect: 'Question type have not been chosen',\r\n            question_incorect: 'Your question has not any letter',\r\n        }\r\n        \r\n        formValidation = () => {\r\n            let question = false\r\n            let type = false\r\n            let correct = false\r\n            \r\n            if (this.state.type==\"W\" || this.state.type ==\"O\") {\r\n                type = true\r\n            }\r\n            if (this.state.question.length > 0) {\r\n                question = true\r\n            }\r\n            if (question && type) {\r\n                correct = true\r\n            }\r\n            return ({\r\n                correct, question, type\r\n            })\r\n        }\r\n        handleChange = (e) => {\r\n            const name = e.target.name;\r\n            this.setState({\r\n                [name]: e.target.value\r\n            })\r\n        };\r\n        handlePlusButton = async(e)=>{\r\n            alert(\"User confirmed\");\r\n         \r\n        }\r\n        handleSubmit = async (e) => {\r\n            e.preventDefault()\r\n    \r\n            const validation = this.formValidation()\r\n            console.log(validation)\r\n            if (validation.correct) {\r\n                this.setState({\r\n                    message: 'Send, please wait',\r\n                    errors: {\r\n                        email: false,\r\n                        code: false,\r\n                    }\r\n                })\r\n                try {   \r\n                    \r\n                    await Auth.confirmSignUp(this.state.email, this.state.code);\r\n                    // console.log(vall)\r\n                    alert(\"User confirmed\");\r\n                } catch (e) {\r\n                    alert(e.message);\r\n                }\r\n            }\r\n            else {\r\n                this.setState({\r\n                    errors: {\r\n                        email: !validation.email,\r\n                        code: !validation.code,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        componentDidUpdate() {\r\n            if (this.state.message !== '') {\r\n                setTimeout(() => this.setState({\r\n                    message: ''\r\n                }), 9000);\r\n            }\r\n        }\r\n        showMenu(event) {\r\n            event.preventDefault();\r\n            \r\n            this.setState({\r\n              showMenu: true,\r\n            });\r\n          }\r\n      \r\n        render() {\r\n            \r\n            return (\r\n             \r\n                <div className=\"addQuestion\">\r\n                     <label htmlFor=\"testName\">testName:\r\n                    <input type=\"text\" id=\"testName\" name=\"testName\" value={this.state.testName} onChange={this.handleChange} />\r\n                    </label>\r\n                    <label htmlFor=\"type\">Chose question type\r\n                    </label>\r\n                    <button onClick={this.showMenu}>\r\n          Show menu\r\n        </button>\r\n        {\r\n        this.state.showMenu\r\n            ? (\r\n              <div className=\"menu\">\r\n                <button> Menu item 1 </button>\r\n                <button> Menu item 2 </button>\r\n                <button> Menu item 3 </button>\r\n              </div>\r\n            )\r\n            : (\r\n              null\r\n            )\r\n            }\r\n                </div>\r\n            );\r\n        }\r\n \r\n}\r\nexport default AddTest;"]},"metadata":{},"sourceType":"module"}