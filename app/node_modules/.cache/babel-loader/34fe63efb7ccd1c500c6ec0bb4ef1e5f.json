{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pikma\\\\Desktop\\\\Extinguisher\\\\app\\\\src\\\\components\\\\Home\\\\AddTest.js\";\nimport React, { Component } from 'react';\nimport '../style/AddTest.css';\nimport { Auth } from 'aws-amplify';\nimport { XRNoDomElement } from '@aws-amplify/xr';\n\nclass AddTest extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      testName: \"\",\n      question: \"\",\n      type: \"O\",\n      errors: {\n        question: false,\n        type: false\n      },\n      types: [\"Open\", \"Closed\"],\n      questionArray: [],\n      toEdit: \"\"\n    };\n    this.messages = {\n      type_incorect: 'Question type have not been chosen',\n      question_incorect: 'Your question has not any letter'\n    };\n\n    this.formValidation = () => {\n      let question = false;\n      let type = false;\n      let correct = false;\n\n      if (this.state.type == \"W\" || this.state.type == \"O\") {\n        type = true;\n      }\n\n      if (this.state.question.length > 0) {\n        question = true;\n      }\n\n      if (question && type) {\n        correct = true;\n      }\n\n      return {\n        correct,\n        question,\n        type\n      };\n    };\n\n    this.handleChange = e => {\n      const name = e.target.id;\n      this.setState({\n        [name]: e.target.value\n      });\n    };\n\n    this.handleChangeAnswer = e => {\n      const name = e.target.name;\n      this.setState({\n        [name]: document.getElementById(name)\n      });\n    };\n\n    this.handleEdit = e => {\n      if (this.state.questionArray[e].type == 'W') {\n        document.getElementById(\"questionType\").selectedIndex = \"1\";\n      } else document.getElementById(\"questionType\").selectedIndex = \"0\";\n\n      this.setState({\n        question: this.state.questionArray[e].questionContent,\n        type: this.state.questionArray[e].type,\n        toEdit: {\n          type: this.state.questionArray[e].type,\n          language: \"PL\",\n          numberOfAvaibleAnswers: this.state.questionArray[e].numberOfAvaibleAnswers,\n          questionContent: this.state.questionArray[e].questionContent,\n          avaibleAnswers: this.state.questionArray[e].avaibleAnswers\n        }\n      });\n    };\n\n    this.handleQuestionSubmit = e => {\n      this.state.questionArray.push(e);\n    };\n\n    this.handleDeleteQuestion = e => {\n      this.state.questionArray.splice(e, 1);\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.state.message !== '') {\n      setTimeout(() => this.setState({\n        message: ''\n      }), 1000);\n    }\n  }\n\n  handleSendRequest() {\n    let data = {\n      recruiterID: 1234,\n      testName: this.state.testName,\n      questionList: this.state.questionArray\n    };\n    let request = new XMLHttpRequest();\n    request.open('POST', 'arn:aws:execute-api:us-east-1:374991088908:wjdhyrfow4/*/POST/tests', true);\n    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n    request.send(data);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"addQuestion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Test Name:\", React.createElement(\"input\", {\n      type: \"testName\",\n      id: \"testName\",\n      name: \"testName\",\n      value: this.state.question,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }))), React.createElement(\"label\", {\n      htmlFor: \"testName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Question:\", React.createElement(\"input\", {\n      type: \"question\",\n      id: \"question\",\n      name: \"question\",\n      value: this.state.question,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      htmlFor: \"type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Chose question type\"), React.createElement(\"select\", {\n      id: \"questionType\",\n      onChange: () => {\n        this.setState({\n          type: document.getElementById('questionType').value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"O\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Open\"), React.createElement(\"option\", {\n      value: \"W\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Closed\")), React.createElement(QuestionType, {\n      toEdit: this.state.toEdit,\n      type: this.state.type,\n      question: this.state.question,\n      pusher: this.handleQuestionSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(QuestionViewComponent, {\n      handlerEdit: this.handleEdit,\n      handlerDelete: this.handleDeleteQuestion,\n      questionArray: this.state.questionArray,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        this.handleSendRequest;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Save Test\"));\n  }\n\n}\n\nclass OpenQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleQuestionSubmit = () => {\n      var numberOfAvaibleAnswers = 0;\n      var avaibleAnswers = \"\";\n      var questionObj = {\n        type: \"O\",\n        language: \"PL\",\n        numberOfAvaibleAnswers: numberOfAvaibleAnswers,\n        questionContent: this.props.question,\n        avaibleAnswers: avaibleAnswers\n      };\n      console.log(questionObj);\n      this.props.pusher(questionObj);\n    };\n\n    this.state = {};\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleQuestionSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"submit\"));\n  }\n\n}\n\nclass ClosedQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleQuestionSubmit = () => {\n      var numberOfAvaibleAnswers = this.state.numberOfAvaibleAnswers;\n      var avaibleAnswers = \"\";\n\n      for (var i = 0; i < this.state.numberOfAvaibleAnswers; i++) {\n        avaibleAnswers += eval('this.state.answer' + i);\n        avaibleAnswers += \"|\";\n      }\n\n      avaibleAnswers = avaibleAnswers.substring(0, avaibleAnswers.length - 1);\n      var questionObj = {\n        type: \"W\",\n        language: \"PL\",\n        numberOfAvaibleAnswers: numberOfAvaibleAnswers,\n        questionContent: this.props.question,\n        avaibleAnswers: avaibleAnswers\n      };\n      console.log(questionObj);\n      this.props.pusher(questionObj);\n    };\n\n    this.toggleChange = e => {\n      const name = e.target.name;\n      this.setState({\n        [name]: e.target.checked\n      });\n    };\n\n    this.handleChange = e => {\n      const name = e.target.name;\n      this.setState({\n        [name]: e.target.value\n      });\n    };\n\n    this.state = {\n      numbers: [2, 3, 4, 5, 6],\n      numberOfAvaibleAnswers: 4,\n      answer0: \"\",\n      answer1: \"\",\n      answer2: \"\",\n      answer3: \"\",\n      answer4: \"\",\n      answer5: \"\",\n      isCorrect0: false,\n      isCorrect1: false,\n      isCorrect2: false,\n      isCorrect3: false,\n      isCorrect4: false,\n      isCorrect5: false,\n      numberToRender: 4\n    };\n    console.log(this);\n  }\n\n  render() {\n    var rows = [];\n\n    for (var i = 0; i < this.state.numberOfAvaibleAnswers; i++) {\n      rows.push(React.createElement(\"li\", {\n        htmlFor: 'question' + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, 'Question nubmer: ' + (i + 1), React.createElement(\"input\", {\n        id: 'answer' + i,\n        name: 'answer' + i,\n        type: \"text\",\n        onChange: this.handleChange,\n        value: this.state[i + 2],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        id: 'isCorrect' + i,\n        name: 'isCorrect' + i,\n        type: \"checkbox\",\n        onChange: this.toggleChange,\n        value: this.state[i + 8],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      id: \"numberOfAvaibleAnswers\",\n      name: \"numberOfAvaibleAnswers\",\n      defaultValue: \"4\",\n      onChange: () => {\n        this.setState({\n          numberOfAvaibleAnswers: document.getElementById('numberOfAvaibleAnswers').value\n        });\n        ;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, this.state.numbers.map(number => React.createElement(\"option\", {\n      id: number,\n      name: number,\n      value: number,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, number))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, rows), React.createElement(\"button\", {\n      onClick: this.handleQuestionSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, \"submit\"));\n  }\n\n}\n\nclass QuestionType extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    if (this.props.type == \"O\") {\n      return React.createElement(OpenQuestion, {\n        toEdit: this.toEdit,\n        pusher: this.props.pusher,\n        question: this.props.question,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(ClosedQuestion, {\n      toEdit: this.toEdit,\n      pusher: this.props.pusher,\n      question: this.props.question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass QuestionViewComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState(() => {\n        console.log('setting state');\n        return {\n          nothing: \"\"\n        };\n      });\n    }, 1000);\n  }\n\n  createButtonList() {\n    var questionList = [];\n\n    for (let i = 0; i < this.props.questionArray.length; i++) {\n      let type;\n      if (this.props.questionArray[i].type == \"W\") type = \"Closed Question with \" + this.props.questionArray[i].numberOfAvaibleAnswers + \" answers\";else type = \"Open Question\";\n      questionList.push(React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, \" \", this.props.questionArray[i].questionContent, \" \", type, React.createElement(\"button\", {\n        onClick: () => this.props.handlerDelete(i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, \"delete\")));\n    }\n\n    return questionList;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, this.createButtonList());\n  }\n\n}\n\nexport default AddTest;","map":{"version":3,"sources":["C:/Users/pikma/Desktop/Extinguisher/app/src/components/Home/AddTest.js"],"names":["React","Component","Auth","XRNoDomElement","AddTest","state","testName","question","type","errors","types","questionArray","toEdit","messages","type_incorect","question_incorect","formValidation","correct","length","handleChange","e","name","target","id","setState","value","handleChangeAnswer","document","getElementById","handleEdit","selectedIndex","questionContent","language","numberOfAvaibleAnswers","avaibleAnswers","handleQuestionSubmit","push","handleDeleteQuestion","splice","componentDidUpdate","message","setTimeout","handleSendRequest","data","recruiterID","questionList","request","XMLHttpRequest","open","setRequestHeader","send","render","OpenQuestion","constructor","props","questionObj","console","log","pusher","ClosedQuestion","i","eval","substring","toggleChange","checked","numbers","answer0","answer1","answer2","answer3","answer4","answer5","isCorrect0","isCorrect1","isCorrect2","isCorrect3","isCorrect4","isCorrect5","numberToRender","rows","map","number","QuestionType","QuestionViewComponent","componentDidMount","setInterval","nothing","createButtonList","handlerDelete"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport '../style/AddTest.css'\r\nimport { Auth } from 'aws-amplify'\r\nimport { XRNoDomElement } from '@aws-amplify/xr';\r\n\r\n\r\n\r\n\r\nclass AddTest extends Component {\r\n    state = {\r\n        testName:\"\",\r\n        question:\"\",\r\n        type:\"O\",\r\n        errors: {\r\n            question: false,\r\n            type: false,\r\n        },\r\n        types:[\"Open\",\"Closed\"],\r\n        questionArray:[],\r\n        toEdit:\"\"\r\n    }\r\n    \r\n        messages = {\r\n            type_incorect: 'Question type have not been chosen',\r\n            question_incorect: 'Your question has not any letter',\r\n        }\r\n        \r\n        formValidation = () => {\r\n            let question = false\r\n            let type = false\r\n            let correct = false\r\n            \r\n            if (this.state.type==\"W\" || this.state.type ==\"O\") {\r\n                type = true\r\n            }\r\n            if (this.state.question.length > 0) {\r\n                question = true\r\n            }\r\n            if (question && type) {\r\n                correct = true\r\n            }\r\n            return ({\r\n                correct, question, type\r\n            })\r\n        }\r\n        handleChange = (e) => {\r\n            const name = e.target.id;\r\n            this.setState({\r\n                [name]: e.target.value\r\n            })\r\n        };\r\n        handleChangeAnswer=(e)=>{\r\n            const name = e.target.name;\r\n            this.setState({\r\n                [name]:document.getElementById(name)\r\n            })\r\n        }\r\n        componentDidUpdate() {\r\n            if (this.state.message !== '') {\r\n                setTimeout(() => this.setState({\r\n                    message: ''\r\n                }), 1000);\r\n            }\r\n        }\r\n        handleEdit=(e)=>{\r\n            if(this.state.questionArray[e].type =='W'){\r\n\r\n                document.getElementById(\"questionType\").selectedIndex = \"1\";\r\n            }\r\n            else\r\n            \r\n            document.getElementById(\"questionType\").selectedIndex=\"0\";\r\n            \r\n            this.setState({\r\n                question:this.state.questionArray[e].questionContent,\r\n                type:this.state.questionArray[e].type,\r\n                toEdit:{\r\n                        type:this.state.questionArray[e].type,\r\n                        language:\"PL\",\r\n                        numberOfAvaibleAnswers:this.state.questionArray[e].numberOfAvaibleAnswers,\r\n                        questionContent:this.state.questionArray[e].questionContent,\r\n                        avaibleAnswers:this.state.questionArray[e].avaibleAnswers\r\n                        \r\n                    }\r\n                }\r\n            )\r\n        }\r\n        handleSendRequest(){\r\n            let data={\r\n                recruiterID:1234,\r\n                testName:this.state.testName,\r\n                questionList:this.state.questionArray\r\n            }\r\n            let request = new XMLHttpRequest();\r\n            request.open('POST', 'arn:aws:execute-api:us-east-1:374991088908:wjdhyrfow4/*/POST/tests', true);\r\n            request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\r\n            request.send(data);\r\n        }\r\n        handleQuestionSubmit=(e)=>{\r\n\r\n            this.state.questionArray.push(e);\r\n                \r\n        }\r\n        handleDeleteQuestion=(e)=>{\r\n            \r\n            this.state.questionArray.splice(e,1);\r\n        }\r\n        render() {\r\n            \r\n            return (\r\n              \r\n                <div className=\"addQuestion\">\r\n                    <div>\r\n                        <label>Test Name: \r\n                        <input type=\"testName\" id=\"testName\" name=\"testName\" value={this.state.question} onChange={this.handleChange} />\r\n                        </label>\r\n                    </div>\r\n                     <label htmlFor=\"testName\">Question:\r\n                    <input type=\"question\" id=\"question\" name=\"question\" value={this.state.question} onChange={this.handleChange} />\r\n                    </label>\r\n                    <label htmlFor=\"type\">Chose question type\r\n                    </label>\r\n                    <select id ='questionType' onChange={()=>{\r\n        \r\n        this.setState(\r\n            \r\n            {\r\n            type:document.getElementById('questionType').value,\r\n        })\r\n    }}>\r\n        <option value='O'>Open</option>\r\n        <option value ='W'>Closed</option>\r\n    </select>\r\n                    <QuestionType toEdit={this.state.toEdit} type={this.state.type} question={this.state.question} pusher={this.handleQuestionSubmit}/>\r\n                    <QuestionViewComponent handlerEdit = {this.handleEdit} handlerDelete={this.handleDeleteQuestion} questionArray={this.state.questionArray}></QuestionViewComponent> \r\n                    <button onClick={()=>{this.handleSendRequest }}>Save Test</button>\r\n               </div>\r\n            );\r\n        }\r\n}\r\nclass OpenQuestion extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    this.state={        \r\n    }\r\n}\r\n    handleQuestionSubmit = ()=>{\r\n        var numberOfAvaibleAnswers = 0;\r\n     var avaibleAnswers=\"\"\r\n                var questionObj={\r\n                    type:\"O\",\r\n                    language:\"PL\",\r\n                    numberOfAvaibleAnswers:numberOfAvaibleAnswers,\r\n                    questionContent:this.props.question,\r\n                    avaibleAnswers:avaibleAnswers         \r\n                }\r\n                console.log(questionObj)\r\n                this.props.pusher(questionObj);\r\n    }\r\n    render(){\r\n        return <div>\r\n        <button onClick={this.handleQuestionSubmit}>submit</button>\r\n</div>\r\n    }\r\n}\r\nclass ClosedQuestion extends Component{\r\n\r\n    constructor(props){\r\n    super(props);\r\n    this.state={\r\n        numbers:[2,3,4,5,6],\r\n        numberOfAvaibleAnswers:4,\r\n        answer0:\"\",\r\n        answer1:\"\",\r\n        answer2:\"\",\r\n        answer3:\"\",\r\n        answer4:\"\",\r\n        answer5:\"\",\r\n        isCorrect0:false,\r\n        isCorrect1:false,\r\n        isCorrect2:false,\r\n        isCorrect3:false,\r\n        isCorrect4:false,\r\n        isCorrect5:false,\r\n        numberToRender:4,\r\n    }\r\n    console.log(this)\r\n    }\r\n    handleQuestionSubmit = ()=>{\r\n       \r\n        \r\n        var numberOfAvaibleAnswers = this.state.numberOfAvaibleAnswers;\r\n     var avaibleAnswers=\"\"\r\n            for(var i =0;i<this.state.numberOfAvaibleAnswers;i++)\r\n            {\r\n            avaibleAnswers+=eval('this.state.answer'+i);\r\n            avaibleAnswers+=\"|\";\r\n            }\r\n        avaibleAnswers= avaibleAnswers.substring(0,avaibleAnswers.length-1);\r\n            \r\n                var questionObj={\r\n                    type:\"W\",\r\n                    language:\"PL\",\r\n                    numberOfAvaibleAnswers:numberOfAvaibleAnswers,\r\n                    questionContent:this.props.question,\r\n                    avaibleAnswers:avaibleAnswers\r\n                    \r\n                }\r\n                console.log(questionObj)\r\n                this.props.pusher(questionObj);\r\n    }\r\n\r\n    toggleChange = (e) => {\r\n        const name = e.target.name\r\n        \r\n        this.setState({\r\n         [name]: e.target.checked,\r\n        });\r\n      }\r\n    \r\n    handleChange = (e) => {\r\n        const name = e.target.name;\r\n        this.setState({\r\n            [name]: e.target.value\r\n        })\r\n    };\r\n    render(){\r\n        var rows = [];\r\n        for (var i = 0; i < this.state.numberOfAvaibleAnswers; i++) {\r\n           \r\n            rows.push(<li htmlFor={'question'+i}>{'Question nubmer: '+(i+1)}\r\n                  <input id= {'answer'+i} name={'answer'+i} type=\"text\"   onChange = {this.handleChange}  value={this.state[i+2]}/>\r\n                  <input id ={'isCorrect'+i} name ={'isCorrect'+i} type='checkbox' onChange={this.toggleChange} value ={this.state[i+8]} ></input>\r\n            </li>);\r\n        }\r\n      return <div>\r\n                    <select  id ='numberOfAvaibleAnswers' name ='numberOfAvaibleAnswers' defaultValue ='4' onChange={()=>{\r\n                         \r\n                         this.setState({\r\n                            numberOfAvaibleAnswers:document.getElementById('numberOfAvaibleAnswers').value,\r\n                        });\r\n        ;\r\n       \r\n        }}> \r\n        {this.state.numbers.map((number)=>\r\n                        <option id={number} name={number} value={number}>{number}</option>)}\r\n                    </select>\r\n                \r\n        <div>\r\n                {rows}\r\n            </div>\r\n            <button onClick={this.handleQuestionSubmit}>submit</button>\r\n            </div>\r\n        \r\n    }\r\n}\r\nclass QuestionType extends Component{\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n    \r\n    this.state={\r\n\r\n    }\r\n\r\n}\r\n    render(){\r\n        if ( this.props.type == \"O\") {\r\n            return <OpenQuestion toEdit={this.toEdit} pusher={this.props.pusher} question={this.props.question} />;\r\n        }\r\n  \r\n        return <ClosedQuestion  toEdit={this.toEdit} pusher={this.props.pusher} question={this.props.question}/>;\r\n        }\r\n    }\r\n    class QuestionViewComponent extends Component{\r\n\r\n        constructor(props){\r\n            super(props)\r\n            this.state={\r\n            }\r\n        }\r\n        componentDidMount() {\r\n            setInterval(() => {\r\n                this.setState(() => {\r\n                    console.log('setting state');\r\n                    return { nothing : \"\" }\r\n                });\r\n            }, 1000);\r\n        }\r\n\r\n        createButtonList(){\r\n            var questionList=[];\r\n            \r\n            for(let i=0; i<this.props.questionArray.length; i++)\r\n            {\r\n                let type;\r\n                if(this.props.questionArray[i].type==\"W\") type=\"Closed Question with \" + this.props.questionArray[i].numberOfAvaibleAnswers +\" answers\"\r\n                else\r\n                type=\"Open Question\"\r\n            questionList.push(<li> {this.props.questionArray[i].questionContent} {type}\r\n            <button  onClick={()=>this.props.handlerDelete(i)}>delete</button>\r\n            </li>)\r\n            }\r\n            return questionList\r\n        \r\n    }\r\n       \r\n    \r\n        render(){\r\n        return <div>\r\n            {this.createButtonList()}\r\n        </div>\r\n    }\r\n}\r\nexport default AddTest;"]},"metadata":{},"sourceType":"module"}