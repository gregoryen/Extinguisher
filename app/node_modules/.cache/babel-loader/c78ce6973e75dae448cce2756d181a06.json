{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pikma\\\\Desktop\\\\Extinguisher-frontend\\\\app\\\\src\\\\components\\\\Home\\\\AddTest.js\";\nimport React, { Component } from 'react';\nimport '../style/AddTest.css';\nimport { Auth } from 'aws-amplify';\nimport { Dropdown } from 'semantic-ui-react';\nimport { PresignedPost } from 'aws-sdk/clients/s3';\nimport { ReactComponent } from \"@svgr/webpack?-svgo,+titleProp,+ref!*.svg\";\n\nclass AddTest extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      testName: \"\",\n      question: \"\",\n      type: \"O\",\n      questionObj: {\n        \"type\": \"\",\n        \"langugage\": \"PL\",\n        \"questionContent\": \"\",\n        \"numberOfAvaibleAnswers\": \"\",\n        \"avaibleAnswers\": \"\"\n      },\n      answer0: \"\",\n      answer1: \"\",\n      answer2: \"\",\n      answer3: \"\",\n      answer4: \"\",\n      answer5: \"\",\n      errors: {\n        question: false,\n        type: false\n      },\n      numberOfQuestion: 4,\n      types: [\"Open\", \"Closed\"]\n    };\n    this.messages = {\n      type_incorect: 'Question type have not been chosen',\n      question_incorect: 'Your question has not any letter'\n    };\n\n    this.formValidation = () => {\n      let question = false;\n      let type = false;\n      let correct = false;\n\n      if (this.state.type == \"W\" || this.state.type == \"O\") {\n        type = true;\n      }\n\n      if (this.state.question.length > 0) {\n        question = true;\n      }\n\n      if (question && type) {\n        correct = true;\n      }\n\n      return {\n        correct,\n        question,\n        type\n      };\n    };\n\n    this.handleChange = e => {\n      const name = e.target.id;\n      this.setState({\n        [name]: e.target.value\n      });\n    };\n\n    this.handleChangeAnswer = e => {\n      const name = e.target.name;\n      this.setState({\n        [name]: document.getElementById(name)\n      });\n    };\n\n    this.handlePlusButton = async e => {\n      alert(\"User confirmed\");\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const validation = this.formValidation();\n      console.log(validation);\n\n      if (validation.correct) {\n        this.setState({\n          message: 'Send, please wait',\n          errors: {\n            question: false,\n            type: false\n          }\n        });\n\n        try {\n          await Auth.confirmSignUp(this.state.question, this.state.type); // console.log(vall)\n\n          alert(\"User confirmed\");\n        } catch (e) {\n          alert(e.message);\n        }\n      } else {\n        this.setState({\n          errors: {\n            type: !validation.type,\n            question: !validation.question\n          }\n        });\n      }\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.state.message !== '') {\n      setTimeout(() => this.setState({\n        message: ''\n      }), 9000);\n    }\n  }\n\n  handleQuestionSubmit() {\n    var avaibleAnswers = \"\";\n\n    if (this.state.type == 'O') {} else {\n      for (var i = 0; i < this.state.avaibleAnswers; i++) avaibleAnswers += document.getElementById('question' + i);\n\n      avaibleAnswers += '|';\n    }\n\n    avaibleAnswers = avaibleAnswers.slice(0, avaibleAnswers.length - 2);\n    this.setState({\n      questionObj: {\n        type: this.state.type,\n        numberOfAvaibleAnswers: this.state.numberOfAvaibleAnswers,\n        questionContent: this.state.question,\n        avaibleAnswers: avaibleAnswers\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"addQuestion\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"testName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"testName:\", React.createElement(\"input\", {\n      type: \"question\",\n      id: \"question\",\n      name: \"question\",\n      value: this.state.question,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(\"label\", {\n      htmlFor: \"type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Chose question type\"), React.createElement(\"select\", {\n      id: \"testType\",\n      onChange: () => {\n        this.setState({\n          type: document.getElementById('testType').value\n        }); // this.setState();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"O\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Open\"), React.createElement(\"option\", {\n      value: \"W\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Closed\")), React.createElement(Greeting, {\n      state: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), \",\", React.createElement(\"button\", {\n      onSubmit: this.handleQuestionSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"submit\"));\n  }\n\n}\n\nclass NumberOfQuestion extends ReactComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numbers: [2, 3, 4, 5, 6],\n      numberOfAvaibleAnswers: \"4\"\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      id: \"numberOfAvaibleAnswers\",\n      defaultValue: \"4\",\n      onChange: e => {\n        this.setState({\n          numberOfAvaibleAnswers: e.target.value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \" \", this.numbers.map(number => React.createElement(\"option\", {\n      value: number,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, number))));\n  }\n\n}\n\nclass OpenQuestion extends ReactComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"DZIALA OPEN QUESTION HERE\");\n  }\n\n}\n\nclass ClosedQuestion extends ReactComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      numberOfQuestionComponent: OpenQuestion\n    };\n  }\n\n  render() {\n    var select = React.createElement(\"select\", {\n      id: \"numberOfAvaibleAnswers\",\n      defaultValue: \"4\",\n      onChange: () => {\n        this.setState({\n          numberOfAvaibleAnswers: document.getElementById('numberOfAvaibleAnswers').value\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, numbers.map(number => React.createElement(\"option\", {\n      value: number,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, number)));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, select, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, numberOfQuestionComponent), React.createElement(InputClosedQuestion, {\n      state: state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }));\n  }\n\n} // function numberOfQuestion(state) {\n//     const  numbers = [2,3,4,5,6];\n//     return <div>\n//             <select  id ='numberOfAvaibleAnswers' onChange={()=>{ state.setState({numberOfAvaibleAnswers:document.getElementById('numberOfAvaibleAnswers').value})}}>\n//      {numbers.map((number)=>\n//     <option value={number}>{number}</option>)}\n//             </select>\n//     </div>\n//   }\n//   function ClosedQuestion(state){\n//     const  numbers = [2,3,4,5,6];\n//     var select = <select  id ='numberOfAvaibleAnswers' defaultValue ='4' onChange={()=>{ state.state.setState({numberOfAvaibleAnswers:document.getElementById('numberOfAvaibleAnswers').value})}}>\n//     {numbers.map((number)=>\n//    <option value={number}>{number}</option>)}\n//            </select>\n//       return <div>\n//           {select}\n//       <div>\n//     </div>\n// =\n//         <InputClosedQuestion state={state} />\n//         </div>\n//   }\n\n\nfunction InputClosedQuestion(state) {\n  var rows = [];\n\n  for (var i = 0; i < state.state.state.state.numberOfAvaibleAnswers; i++) {\n    rows.push(React.createElement(\"li\", {\n      htmlFor: 'question' + i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, 'Question nubmer: ' + (i + 1), React.createElement(\"input\", {\n      id: 'answer' + i,\n      type: \"text\",\n      onChange: state.state.state.handleChangeAnswer,\n      value: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    })));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, rows);\n}\n\nfunction Greeting(state) {\n  if (state.state.state.type == \"O\") {\n    return React.createElement(OpenQuestion, {\n      state: state.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(ClosedQuestion, {\n    state: state.state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  });\n}\n\nexport default AddTest;","map":{"version":3,"sources":["C:/Users/pikma/Desktop/Extinguisher-frontend/app/src/components/Home/AddTest.js"],"names":["React","Component","Auth","Dropdown","PresignedPost","AddTest","state","testName","question","type","questionObj","answer0","answer1","answer2","answer3","answer4","answer5","errors","numberOfQuestion","types","messages","type_incorect","question_incorect","formValidation","correct","length","handleChange","e","name","target","id","setState","value","handleChangeAnswer","document","getElementById","handlePlusButton","alert","handleSubmit","preventDefault","validation","console","log","message","confirmSignUp","componentDidUpdate","setTimeout","handleQuestionSubmit","avaibleAnswers","i","slice","numberOfAvaibleAnswers","questionContent","render","NumberOfQuestion","ReactComponent","numbers","map","number","OpenQuestion","ClosedQuestion","numberOfQuestionComponent","select","InputClosedQuestion","rows","push","Greeting"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport '../style/AddTest.css'\r\nimport { Auth } from 'aws-amplify'\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport { PresignedPost } from 'aws-sdk/clients/s3';\r\nimport { ReactComponent } from '*.svg';\r\n\r\n\r\n\r\nclass AddTest extends Component {\r\n    state = {\r\n        testName:\"\",\r\n        question:\"\",\r\n        type:\"O\",\r\n        questionObj: {\r\n            \"type\": \"\",\r\n            \"langugage\": \"PL\",\r\n            \"questionContent\": \"\",\r\n            \"numberOfAvaibleAnswers\": \"\",\r\n            \"avaibleAnswers\": \"\"\r\n          },\r\n        \r\n            answer0:\"\",\r\n            answer1:\"\",\r\n            answer2:\"\",\r\n            answer3:\"\",\r\n            answer4:\"\",\r\n            answer5:\"\",\r\n        \r\n        errors: {\r\n            question: false,\r\n            type: false,\r\n        },\r\n        numberOfQuestion:4,\r\n        types:[\"Open\",\"Closed\"]\r\n    }\r\n    \r\n        messages = {\r\n            type_incorect: 'Question type have not been chosen',\r\n            question_incorect: 'Your question has not any letter',\r\n        }\r\n        \r\n        formValidation = () => {\r\n            let question = false\r\n            let type = false\r\n            let correct = false\r\n            \r\n            if (this.state.type==\"W\" || this.state.type ==\"O\") {\r\n                type = true\r\n            }\r\n            if (this.state.question.length > 0) {\r\n                question = true\r\n            }\r\n            if (question && type) {\r\n                correct = true\r\n            }\r\n            return ({\r\n                correct, question, type\r\n            })\r\n        }\r\n        handleChange = (e) => {\r\n            const name = e.target.id;\r\n            this.setState({\r\n                [name]: e.target.value\r\n            })\r\n        };\r\n        handleChangeAnswer=(e)=>{\r\n            const name = e.target.name;\r\n            this.setState({\r\n                [name]:document.getElementById(name)\r\n            })\r\n        }\r\n        handlePlusButton = async(e)=>{\r\n            alert(\"User confirmed\");\r\n         \r\n        }\r\n        handleSubmit = async (e) => {\r\n            e.preventDefault()\r\n    \r\n            const validation = this.formValidation()\r\n            console.log(validation)\r\n            if (validation.correct) {\r\n                this.setState({\r\n                    message: 'Send, please wait',\r\n                    errors: {\r\n                        question: false,\r\n                        type: false,\r\n                    }\r\n                })\r\n                try {   \r\n                    \r\n                    await Auth.confirmSignUp(this.state.question, this.state.type);\r\n                    // console.log(vall)\r\n                    alert(\"User confirmed\");\r\n                } catch (e) {\r\n                    alert(e.message);\r\n                }\r\n            }\r\n            else {\r\n                this.setState({\r\n                    errors: {\r\n                        type: !validation.type,\r\n                        question: !validation.question,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        componentDidUpdate() {\r\n            if (this.state.message !== '') {\r\n                setTimeout(() => this.setState({\r\n                    message: ''\r\n                }), 9000);\r\n            }\r\n        }\r\n        handleQuestionSubmit(){\r\n            var avaibleAnswers = \"\"\r\n            if(this.state.type == 'O'){}\r\n            else\r\n            {\r\n                for(var i =0;i<this.state.avaibleAnswers;i++)\r\n                avaibleAnswers+=document.getElementById('question'+i);\r\n                avaibleAnswers+='|';\r\n            }\r\n            avaibleAnswers= avaibleAnswers.slice(0,avaibleAnswers.length-2);\r\n                this.setState({\r\n                    questionObj:{\r\n                        type:this.state.type,\r\n                        numberOfAvaibleAnswers:this.state.numberOfAvaibleAnswers,\r\n                        questionContent:this.state.question,\r\n                        avaibleAnswers:avaibleAnswers\r\n                        \r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n        render() {\r\n            \r\n            return (\r\n             \r\n                <div className=\"addQuestion\">\r\n                     <label htmlFor=\"testName\">testName:\r\n                    <input type=\"question\" id=\"question\" name=\"question\" value={this.state.question} onChange={this.handleChange} />\r\n                    </label>\r\n                    <label htmlFor=\"type\">Chose question type\r\n                    </label>\r\n                    <select id ='testType' onChange={()=>{\r\n        \r\n        this.setState(\r\n            \r\n            {\r\n            type:document.getElementById('testType').value,\r\n        })\r\n       // this.setState();\r\n    }}>\r\n        <option value='O'>Open</option>\r\n        <option value ='W'>Closed</option>\r\n    </select>\r\n                    <Greeting state={this} />,\r\n                    <button onSubmit={this.handleQuestionSubmit}>submit</button>\r\n\r\n               </div>\r\n            );\r\n        }\r\n\r\n \r\n}\r\n\r\n\r\n\r\nclass NumberOfQuestion extends ReactComponent{\r\n    state={\r\n        numbers:[2,3,4,5,6],\r\n        numberOfAvaibleAnswers:\"4\"\r\n    }\r\n    render(){\r\n        return <div>\r\n                    <select  id ='numberOfAvaibleAnswers' defaultValue ='4' onChange={(e)=>{ this.setState({numberOfAvaibleAnswers:e.target.value})}}> {this.numbers.map((number)=>\r\n                        <option value={number}>{number}</option>)}\r\n                    </select>\r\n                </div>\r\n    }\r\n}\r\nclass OpenQuestion extends ReactComponent{\r\n    state={\r\n\r\n    }\r\n    render(){\r\n        return <div>DZIALA OPEN QUESTION HERE</div>\r\n    }\r\n}\r\nclass ClosedQuestion extends ReactComponent{\r\n    \r\n    state={\r\n        numberOfQuestionComponent : OpenQuestion,\r\n\r\n    }\r\n    render(){\r\n        var select = <select  id ='numberOfAvaibleAnswers' defaultValue ='4' onChange={()=>{ this.setState({numberOfAvaibleAnswers:document.getElementById('numberOfAvaibleAnswers').value})}}>\r\n    {numbers.map((number)=>\r\n   <option value={number}>{number}</option>)}\r\n           </select>\r\n \r\n      return <div>\r\n          {select}\r\n      <div>\r\n            \r\n    </div>\r\n        <div>{numberOfQuestionComponent}</div>\r\n        <InputClosedQuestion state={state} />\r\n        </div>\r\n    }\r\n}\r\n// function numberOfQuestion(state) {\r\n//     const  numbers = [2,3,4,5,6];\r\n//     return <div>\r\n//             <select  id ='numberOfAvaibleAnswers' onChange={()=>{ state.setState({numberOfAvaibleAnswers:document.getElementById('numberOfAvaibleAnswers').value})}}>\r\n//      {numbers.map((number)=>\r\n//     <option value={number}>{number}</option>)}\r\n//             </select>\r\n//     </div>\r\n//   }\r\n  \r\n\r\n//   function ClosedQuestion(state){\r\n//     const  numbers = [2,3,4,5,6];\r\n//     var select = <select  id ='numberOfAvaibleAnswers' defaultValue ='4' onChange={()=>{ state.state.setState({numberOfAvaibleAnswers:document.getElementById('numberOfAvaibleAnswers').value})}}>\r\n//     {numbers.map((number)=>\r\n//    <option value={number}>{number}</option>)}\r\n//            </select>\r\n \r\n//       return <div>\r\n//           {select}\r\n//       <div>\r\n            \r\n//     </div>\r\n// =\r\n//         <InputClosedQuestion state={state} />\r\n//         </div>\r\n//   }\r\n  function InputClosedQuestion(state){\r\n    var rows = [];\r\n    for (var i = 0; i < state.state.state.state.numberOfAvaibleAnswers; i++) {\r\n       \r\n        rows.push(<li htmlFor={'question'+i}>{'Question nubmer: '+(i+1)}\r\n              <input id= {'answer'+i} type=\"text\"   onChange = {state.state.state.handleChangeAnswer}  value=''/>\r\n        </li>);\r\n    }\r\n    \r\n            return <div>\r\n                {rows}\r\n            </div>\r\n  }\r\n\r\nfunction Greeting(state) {\r\n\r\n    if ( state.state.state.type == \"O\") {\r\n      return <OpenQuestion state={state.state} />;\r\n    }\r\n\r\n    return <ClosedQuestion state={state.state}/>;\r\n\r\n  }\r\nexport default AddTest;"]},"metadata":{},"sourceType":"module"}